import React, { useState } from 'react';

import {
  EuiFormRow,
  EuiSelect,
  EuiSelectOption,
  EuiFieldText,
} from '@elastic/eui';

import SimulationParameters from '../../../../../shared/interfaces/SimulationParameters';

import './SimulatorFormParameters.scss';

export interface SimulatorFormParametersProps {
  simulatorFormParameters: SimulationParameters;
  onSimulatorFormParametersChanged?: (
    SimulatorFormParameters: SimulationParameters
  ) => void;
}

const INTERVAL = 2000;
const NUMBER_OF_REQUESTS = 1;
const MAX_RANDOM_DELAY = 500;
const TIMEOUT = 5000;

const SimulatorFormParameters: React.FC<SimulatorFormParametersProps> = (
  props: SimulatorFormParametersProps
) => {
  const { simulatorFormParameters, onSimulatorFormParametersChanged } = props;

  const [numberOfRequests, setNumberOfRequests] = useState<number>(
    simulatorFormParameters.numberOfRequests || NUMBER_OF_REQUESTS
  );
  const [interval, setInterval] = useState<number>(
    simulatorFormParameters.interval || INTERVAL
  );
  const [maxRandomDelay, setMaxRandomDelay] = useState<number>(
    simulatorFormParameters.maxRandomDelay || MAX_RANDOM_DELAY
  );
  const [timeout, setTimeout] = useState<number>(
    simulatorFormParameters.timeout || TIMEOUT
  );

  let numberOfRequestsOptions: EuiSelectOption[] = [
    { text: 1, value: 1 },
    { text: 5, value: 5 },
    { text: 10, value: 10 },
    { text: 25, value: 25 },
    { text: 50, value: 50 },
    { text: 100, value: 100 },
    { text: 500, value: 500 },
    { text: 1000, value: 1000 },
  ];

  const simulatorFormParametersChanged = (parameter: any, value: any) => {
    const _simulatorFormParameters: SimulationParameters = {
      ...simulatorFormParameters,
      [parameter]: value,
    };

    if (onSimulatorFormParametersChanged) {
      onSimulatorFormParametersChanged(_simulatorFormParameters);
    }
  };

  return (
    <>
      <EuiFormRow
        label="How many requests?"
        helpText="How many requests should be sent to the backend.">
        <EuiSelect
          options={numberOfRequestsOptions}
          value={numberOfRequests}
          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
            const value = parseInt(e.target.value);
            setNumberOfRequests(value);
            simulatorFormParametersChanged('numberOfRequests', value);
          }}
          aria-label=""
        />
      </EuiFormRow>

      <EuiFormRow
        label="Interval"
        helpText="The interval between each request.">
        <EuiFieldText
          icon="pause"
          value={interval}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
            const value = parseInt(e.target.value);
            setInterval(value);
            simulatorFormParametersChanged('interval', value);
          }}
          aria-label="Interval"
        />
      </EuiFormRow>

      <EuiFormRow
        label="Max. random delay"
        helpText="A maximum random delay time that will be generated by the backend.">
        <EuiFieldText
          icon="clock"
          value={maxRandomDelay}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
            const value = parseInt(e.target.value);
            setMaxRandomDelay(value);
            simulatorFormParametersChanged('maxRandomDelay', value);
          }}
          aria-label="Max. random delay"
        />
      </EuiFormRow>

      <EuiFormRow
        label="Timeout"
        helpText="A timeout at which the request will be considered failed.">
        <EuiFieldText
          icon="alert"
          value={timeout}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
            const value = parseInt(e.target.value);
            setTimeout(value);
            simulatorFormParametersChanged('timeout', value);
          }}
          aria-label="Timeout"
        />
      </EuiFormRow>
    </>
  );
};

export default SimulatorFormParameters;
